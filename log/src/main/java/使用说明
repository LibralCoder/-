log4j2（其实是log4j的第二个版本）
**配置文件**
log4j 2.x版本不再支持像1.x中的.properties后缀的文件配置方式，2.x版本配置文件后缀名只能为.xml，.json 或者.jsn。系统选择配置文件的优先级(从先到后)如下：

classpath 下的名为log4j2-test.json或者log4j2-test.jsn的文件.
classpath 下的名为log4j2-test.xml的文件.
classpath 下名为log4j2.json或者log4j2.jsn的文件.
classpath 下名为log4j2.xml的文件.
我们一般默认使用log4j2.xml进行命名。如果本地要测试，可以把log4j2-test.xml放到classpath，而正式环境使用log4j2.xml，则在打包部署的时候不要打包log4j2-test.xml即可。
**配置详解**
根节点Configuration有两个属性：status和monitorinterval，有两个子节点：Appenders和Loggers(表明可以定义多个Appender和Logger)：
  status用来指定log4j本身的打印日志的级别。
  monitorinterval用于指定log4j自动重新配置的监测间隔时间，单位是s，最小是5s
1.Appenders节点，常见的有三种子节点：Console、RollingFile、File：
  Console节点用来定义输出到控制台的Appender
 （1）name：指定 Appender 的名字
 （2）target：SYSTEM_OUT 或SYSTEM_ERR，一般只设置默认：SYSTEM_OUT
 （3）PatternLayout：输出格式，不设置默认为%m%n
  File节点用来定义输出到指定位置的文件的Appender
 （1）name：指定Appender的名字
 （2）fileName：指定输出日志的目的文件带全路径的文件名
 （3）PatternLayout：输出格式，不设置默认为%m%n
  RollingFile节点用来定义超过指定大小自动删除旧的创建新的的Appender
 （1）name：指定Appender的名字
 （2）fileName：指定输出日志的目的文件带全路径的文件名
 （3）PatternLayout：输出格式，不设置默认为%m%n
 （4）filePattern：指定新建日志文件的名称格式
 （5）Policies：指定滚动日志的策略，就是什么时候进行新建日志文件输出日志
 （6）TimeBasedTriggeringPolicy：Policies子节点，基于时间的滚动策略，interval属性用来指定多久滚动一次，默认是1 hour。modulate=true用来调整时间：比如现在是早上3am，interval是4，那么第一次滚动是在4am，接着是8am，12am...而不是7am
 （7）SizeBasedTriggeringPolicy：Policies子节点，基于指定文件大小的滚动策略，size 属性用来定义每个日志文件的大小.
 （8）DefaultRolloverStrategy：用来指定同一个文件夹下最多有几个日志文件时开始删除最旧的，创建新的(通过max属性)。
2.Loggers节点，常见的有两种Root和Logger：
   Root 节点用来指定项目的根日志，如果没有单独指定 Logger，那么就会默认使用该 Root日志输出
  level：日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF
  AppenderRef：Root的子节点，用来指定该日志输出到哪个Appender
   Logger 节点用来单独指定日志的形式，比如要为指定包下的class指定不同的日志级别等。
  level：日志输出级别，共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF
  name：用来指定该 Logger所适用的类或者类所在的包全路径,继承自 Root节点.
  AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender，如果没有指定，就会默认继承自 Root。如果指定了，那么会在指定的这个Appender和 Root的Appender中都会输出，此时我们可以设置 Logger的 additivity="false"只在自定义的 Appender中进行输出。

3.关于日志 level
  共有8个级别，按照从低到高为：All < Trace < Debug < Info < Warn < Error < Fatal < OFF：

  All：最低等级的，用于打开所有日志记录.
  Trace：是追踪，就是程序推进以下，你就可以写个trace输出，所以trace应该会特别多，不过没关系，我们可以设置最低日志级别不让他输出.
  Debug：指出细粒度信息事件对调试应用程序是非常有帮助的.
  Info：消息在粗粒度级别上突出强调应用程序的运行过程.
  Warn：输出警告及warn以下级别的日志.
  Error：输出错误信息日志.
  Fatal：输出每个严重的错误事件将会导致应用程序的退出的日志.
  OFF：最高等级的，用于关闭所有日志记录.
  程序会打印高于或等于所设置级别的日志，设置的日志等级越高，打印出来的日志就越少。
  --------------------------------------------------------------------------------
  **模式说明**
  
     %m   输出代码中指定的消息
  　　%p   输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL 
  　　%r   输出自应用启动到输出该log信息耗费的毫秒数 
  　　%c   输出所属的类目，通常就是所在类的全名 
  　　%t   输出产生该日志事件的线程名 
  　　%n   输出一个回车换行符，Windows平台为“\r\n”，Unix平台为“\n” 
  　　%d   输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy MMM dd HH:mm:ss , SSS}，输出类似：2002年10月18日  22 ： 10 ： 28 ， 921  
  　　%l   输出日志事件的发生位置，包括类目名、发生的线程，以及在代码中的行数。举例：Testlog4.main(TestLog4.java: 10 ) 
-----------------------------------------------------------------------------
tip：
   在日志内容里拼接"\n"即可换行

